diff --git a/gfx/thebes/gfxPlatformFontList.cpp b/gfx/thebes/gfxPlatformFontList.cpp
--- a/gfx/thebes/gfxPlatformFontList.cpp
+++ b/gfx/thebes/gfxPlatformFontList.cpp
@@ -146,17 +146,17 @@ const gfxFontEntry::ScriptRange gfxPlatf
     {0xaa60,
      0xaa7f,
      2,
      {TRUETYPE_TAG('m', 'y', 'm', 'r'), TRUETYPE_TAG('m', 'y', 'm', '2'), 0}},
     // Thai seems to be "renderable" without AAT morphing tables
     {0, 0, 0, {0, 0, 0}}  // terminator
 };
 
-static const char* kObservedPrefs[] = {
+constexpr const char* kObservedPrefs[] = {
     "font.", "font.name-list.", "intl.accept_languages",  // hmmmm...
     "browser.display.use_document_fonts.icon_font_allowlist", nullptr};
 
 static const char kFontSystemWhitelistPref[] = "font.system.whitelist";
 
 static const char kCJKFallbackOrderPref[] = "font.cjk_pref_fallback_order";
 
 // Pref for the list of icon font families that still get to override the
@@ -527,28 +527,29 @@ void gfxPlatformFontList::ApplyWhitelist
     // No (visible) families were whitelisted: ignore the whitelist
     // and just leave the fontlist unchanged.
     return;
   }
   aFamilies = std::move(accepted);
 }
 
 bool gfxPlatformFontList::FamilyInList(const nsACString& aName,
-                                       const char* aList[], size_t aCount) {
+                                       const char* const aList[],
+                                       size_t aCount) {
   size_t result;
   return BinarySearchIf(
       aList, 0, aCount,
       [&](const char* const aVal) -> int {
         return nsCaseInsensitiveUTF8StringComparator(
             aName.BeginReading(), aVal, aName.Length(), strlen(aVal));
       },
       &result);
 }
 
-void gfxPlatformFontList::CheckFamilyList(const char* aList[], size_t aCount) {
+void gfxPlatformFontList::CheckFamilyList(const char* const aList[], size_t aCount) {
 #ifdef DEBUG
   MOZ_ASSERT(aCount > 0, "empty font family list?");
   const char* a = aList[0];
   uint32_t aLen = strlen(a);
   for (size_t i = 1; i < aCount; ++i) {
     const char* b = aList[i];
     uint32_t bLen = strlen(b);
     if (nsCaseInsensitiveUTF8StringComparator(a, b, aLen, bLen) >= 0) {
