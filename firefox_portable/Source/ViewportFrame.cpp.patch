diff --git a/layout/generic/ViewportFrame.cpp b/layout/generic/ViewportFrame.cpp
--- a/layout/generic/ViewportFrame.cpp
+++ b/layout/generic/ViewportFrame.cpp
@@ -4,16 +4,20 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 /*
  * rendering object that is the root of the frame tree, which contains
  * the document's scrollbars and contains fixed-positioned elements
  */
 
+#if (_M_IX86_FP >= 1) || defined(__SSE__) || defined(_M_AMD64) || defined(__amd64__)
+#include <xmmintrin.h>
+#endif
+
 #include "mozilla/ViewportFrame.h"
 
 #include "MobileViewportManager.h"
 #include "mozilla/ComputedStyleInlines.h"
 #include "mozilla/PresShell.h"
 #include "mozilla/ProfilerLabels.h"
 #include "mozilla/RestyleManager.h"
 #include "mozilla/ScrollContainerFrame.h"
@@ -393,16 +397,20 @@ void ViewportFrame::Reflow(nsPresContext
 
   if (mFrames.NotEmpty()) {
     // Deal with a non-incremental reflow or an incremental reflow
     // targeted at our one-and-only principal child frame.
     if (aReflowInput.ShouldReflowAllKids() ||
         mFrames.FirstChild()->IsSubtreeDirty()) {
       // Reflow our one-and-only principal child frame
       nsIFrame* kidFrame = mFrames.FirstChild();
+#if (_M_IX86_FP >= 1) || defined(__SSE__) || defined(_M_AMD64) || defined(__amd64__)
+      _mm_prefetch((char *)kidFrame, _MM_HINT_NTA);
+      _mm_prefetch((char *)kidFrame + 64, _MM_HINT_NTA);
+#endif
       ReflowOutput kidDesiredSize(aReflowInput);
       const WritingMode kidWM = kidFrame->GetWritingMode();
       LogicalSize availableSpace = aReflowInput.AvailableSize(kidWM);
       ReflowInput kidReflowInput(aPresContext, aReflowInput, kidFrame,
                                  availableSpace);
 
       // Reflow the frame
       kidReflowInput.SetComputedBSize(aReflowInput.ComputedBSize());
