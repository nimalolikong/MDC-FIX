diff --git a/gfx/angle/checkout/src/compiler/translator/Types.h b/gfx/angle/checkout/src/compiler/translator/Types.h
--- a/gfx/angle/checkout/src/compiler/translator/Types.h
+++ b/gfx/angle/checkout/src/compiler/translator/Types.h
@@ -365,23 +365,25 @@ class TType
     {
         mArraySizes = sizes;
         invalidateMangledName();
     }
 
     TBasicType type;
     TPrecision precision;
     TQualifier qualifier;
+    TMemoryQualifier memoryQualifier;
     bool invariant;
     bool precise;
 
-    TMemoryQualifier memoryQualifier;
-    TLayoutQualifier layoutQualifier;
     uint8_t primarySize;    // size of vector or cols matrix
     uint8_t secondarySize;  // rows of a matrix
+    bool mIsStructSpecifier;
+
+    TLayoutQualifier layoutQualifier;
 
     // Used to make an array type. Outermost array size is stored at the end of the vector. Having 0
     // in this vector means an unsized array.
     TSpan<const unsigned int> mArraySizes;
     // Storage for mArraySizes, if any.  This is usually the case, except for constexpr TTypes which
     // only have a valid mArraySizes (with mArraySizesStorage being nullptr).  Therefore, all
     // modifications to array sizes happen on the storage (and if dimensions change, mArraySizes is
     // also updated) and all reads are from mArraySizes.
@@ -390,17 +392,16 @@ class TType
     // This is set only in the following two cases:
     // 1) Represents an interface block.
     // 2) Represents the member variable of an unnamed interface block.
     // It's nullptr also for members of named interface blocks.
     const TInterfaceBlock *mInterfaceBlock;
 
     // nullptr unless this is a struct
     const TStructure *mStructure;
-    bool mIsStructSpecifier;
 
     // If this is a field of a nameless interface block, this would indicate which member it's
     // refering to.
     size_t mInterfaceBlockFieldIndex;
 
     mutable const char *mMangledName;
 };
 
